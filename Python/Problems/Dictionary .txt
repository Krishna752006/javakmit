python programs on dictionaries
----------------------------------------------------------------
1. Write a Python program to iterate over dictionaries using for loops.

sample 1:
input:
Enter the dictionary in the format {key1: value1, key2: value2, ...}: {1: 'one', 2: 'two', 3: 'three'}
output:
Iterating over dictionary:
Key: 1, Value: one
Key: 2, Value: two
Key: 3, Value: three
Explanation: The program iterates over the key-value pairs in the dictionary and prints each key-value pair
----------------------------------------------------------------------------------------------------------------------------------

2. Write a Python program to create a dictionary from a string.
Note: Track the count of the letters from the string.
sample1:
input:
Enter a string: pythonprogramming
output:
Dictionary created:
{'p': 2, 'y': 1, 't': 1, 'h': 1, 'o': 2, 'n': 2, 'r': 2, 'g': 2, 'a': 1, 'm': 2, 'i': 1}
Explanation: The program creates a dictionary where each character in the string "pythonprogramming" is a key, and the value associated with each key is the count of that character in the string.

sample2:
input:
Enter a string: aaaabbbccc
output:
Dictionary created:{'a': 4, 'b': 3, 'c': 3}
Explanation: The program creates a dictionary where each character in the string "aaaabbbccc" is a key, and the value associated with each key is the count of that character in the string.
-------------------------------------------------------------------------------------------------------------------------------------------------------


3.Write a Python program to update the values of one dictionary with the values from another dictionary.
 If a key exists in both dictionaries, the value from the second dictionary should overwrite the value 
from the first dictionary.

sample 1:
input:
Enter the first dictionary in the format {key1: value1, key2: value2, ...}: {'apple': 5, 'banana': 10, 'orange': 15}
Enter the second dictionary in the format {key1: value1, key2: value2, ...}: {'grape': 20, 'kiwi': 25}
output:
Updated dictionary:
{'apple': 5, 'banana': 10, 'orange': 15, 'grape': 20, 'kiwi': 25}

sample2:
input:
Enter the first dictionary in the format {key1: value1, key2: value2, ...}: {'x': 10, 'y': 20, 'z': 30}
Enter the second dictionary in the format {key1: value1, key2: value2, ...}: {'y': 25, 'z': 35, 'w': 40}
output:
Updated dictionary:{'x': 10, 'y': 25, 'z': 35, 'w': 40}

Explanation: The program updates the values of the first dictionary with the values from the second dictionary. If a key exists in both dictionaries, the value from the second dictionary overwrites the value from the first dictionary.
------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Implement a function that finds the intersection of two dictionaries. 
The intersection of dictionaries contains key-value pairs that are common to both dictionaries. 
The function should return a new dictionary containing these common key-value pairs.

sample 1:
input:
Enter the first dictionary in the format {key1: value1, key2: value2, ...}: {'x': 10, 'y': 20, 'z': 30}
Enter the second dictionary in the format {key1: value1, key2: value2, ...}: {'y': 25, 'z': 30, 'w': 40}
output:
Intersection of dictionaries:{'z': 30}

Explanation: The intersection of the dictionaries contains the key-value pairs that are common to both dictionaries. In this case, the key 'z' has the same value in both dictionaries.

sample 2:
input:
Enter the first dictionary in the format {key1: value1, key2: value2, ...}: {'apple': 5, 'banana': 10, 'orange': 15}
Enter the second dictionary in the format {key1: value1, key2: value2, ...}: {'grape': 20, 'kiwi': 25}
output:
Intersection of dictionaries:{}

Explanation: There are no common key-value pairs between the two dictionaries, so the intersection is an empty dictionary.
--------------------------------------------------------------------------------------------------------------------------------------------------


5.Write a Python program to sort a dictionary by its keys or values. 
The program should take a dictionary as input and return a new dictionary sorted either by keys or values, based on user input.

sample 1:
input :
Enter the dictionary in the format {key1: value1, key2: value2, ...}: {'apple': 5, 'banana': 2, 'orange': 10}
Sort by keys (k) or values (v)? Enter 'k' or 'v': v
output:
Sorted dictionary:{'banana': 2, 'apple': 5, 'orange': 10}
Explanation: The dictionary is sorted by values in ascending order.

sample 2:
input:
Enter the dictionary in the format {key1: value1, key2: value2, ...}: {'b': 2, 'c': 3, 'a': 1}
Sort by keys (k) or values (v)? Enter 'k' or 'v': k
output:
Sorted dictionary:{'a': 1, 'b': 2, 'c': 3}
Explanation: The dictionary is sorted by keys in ascending order.
------------------------------------------------------------------------------------------------------------------------------------------------------------

6.Implement a Python function to invert a dictionary. The function should swap the keys and values of the input dictionary, 
where the keys become the values and the values become the keys. If there are duplicate values, 
the function should handle them appropriately.
sample 1:
input:
Enter the dictionary in the format {key1: value1, key2: value2, ...}: {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}
output:
Inverted dictionary:{'red': 'apple', 'yellow': 'banana', 'orange': 'orange'}

sample 2:
input:
Enter the dictionary in the format {key1: value1, key2: value2, ...}: {'x': 10, 'y': 20, 'z': 20}
output:
Inverted dictionary:{10: 'x', 20: ['y', 'z']}

Explanation: The function swaps the keys and values of the input dictionary. The keys become the values and the values become the keys. In this case, both 'y' and 'z' have the same value 20, so they are stored as a list under the key 20.
--------------------------------------------------------------------------------------------------------------------------------------------------------

7. Write a Python function that merges two dictionaries. If there are overlapping keys,
 the values from the second dictionary should overwrite the values from the first dictionary.
 The function should return the merged dictionary.
sample 1:
input:
Enter the first dictionary in the format {key1: value1, key2: value2, ...}: {'apple': 5, 'banana': 10, 'orange': 15}
Enter the second dictionary in the format {key1: value1, key2: value2, ...}: {'grape': 20, 'kiwi': 25}
output:
Merged dictionary:{'apple': 5, 'banana': 10, 'orange': 15, 'grape': 20, 'kiwi': 25}

Explanation: There are no overlapping keys between the two dictionaries, so all key-value pairs are included in the merged dictionary.

sample 2:
input:
Enter the first dictionary in the format {key1: value1, key2: value2, ...}: {'x': 10, 'y': 20, 'z': 30}
Enter the second dictionary in the format {key1: value1, key2: value2, ...}: {'y': 25, 'z': 35, 'w': 40}
output:
Merged dictionary:{'x': 10, 'y': 25, 'z': 35, 'w': 40}

Explanation: The values from the second dictionary overwrite the values from the first dictionary for the keys that overlap.
---------------------------------------------------------------------------------------------------------------------------------------------------------

8. Write a Python program that takes a string as input and counts the frequency of each word in the string. 
The program should output a dictionary where the keys are the words and the values are their respective frequencies.

sample 1:
input:
Enter a string: the quick brown fox jumps over the lazy dog
output:
Word frequency:{'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}

Explanation: In the input string, the word "the" appears twice, while the other words appear once.

sample 2:
input:
Enter a string: python is a powerful language python is used for various purposes
output:
Word frequency:{'python': 2, 'is': 2, 'a': 1, 'powerful': 1, 'language': 1, 'used': 1, 'for': 1, 'various': 1, 'purposes': 1}

Explanation: In the input string, the words "python" and "is" appear twice, while the other words appear once.
-----------------------------------------------------------------------------------------------------------------------------------------------------------

9. Write a Python program to convert a list into a nested dictionary of keys.

sample 1:
input:
Enter the list of keys separated by commas: animal,dog,breed,Labrador,category,pets
Enter the value: friendly
output:
Nested dictionary:{'animal': {'dog': {'breed': {'Labrador': {'category': {'pets': 'friendly'}}}}}}

Explanation: The list ['animal', 'dog', 'breed', 'Labrador', 'category', 'pets'] is converted into a nested dictionary where each element in the list becomes a key, and the last element 'pets' is associated with the value 'friendly'.

sample2:
input:
Enter the list of keys separated by commas: continent,Africa,country,Egypt,city,Cairo
Enter the value: historical
output:
Nested dictionary:{'continent': {'Africa': {'country': {'Egypt': {'city': {'Cairo': 'historical'}}}}}}

Explanation: The list ['continent', 'Africa', 'country', 'Egypt', 'city', 'Cairo'] is converted into a nested dictionary where each element in the list becomes a key, and the last element 'Cairo' is associated with the value 'historical'.
------------------------------------------------------------------------------------------------------------------------------------------------------------


10. Write a Python program to get the top three items in a shop using dictionaries 
sample 1:
input:
Enter the number of items in the shop: 3
Enter the name of item 1: Book
Enter the price of item 1: 14.99
Enter the name of item 2: Pen
Enter the price of item 2: 4.99
Enter the name of item 3: Notebook
Enter the price of item 3: 9.99
output:
Top three items in the shop:
Book: $14.99
Notebook: $9.99
Pen: $4.99

Explanation: As there are only three items in the shop, all items are considered the top three based on their prices.

sample 2:
input:
Enter the number of items in the shop: 5
Enter the name of item 1: Laptop
Enter the price of item 1: 999.99
Enter the name of item 2: Smartphone
Enter the price of item 2: 799.99
Enter the name of item 3: Tablet
Enter the price of item 3: 499.99
Enter the name of item 4: Headphones
Enter the price of item 4: 199.99
Enter the name of item 5: Smartwatch
Enter the price of item 5: 299.99
output:
Top three items in the shop:Laptop: $999.99
Smartphone: $799.99
Tablet: $499.99

Explanation: The top three items in the shop based on their prices are Laptop, Smartphone, and Tablet.
------------------------------------------------------------------------------------------------------------------------------------------------

11.Write a Python program to create a dictionary grouping a sequence of key-value pairs into a dictionary of lists.
Original list:[('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
Grouping a sequence of key-value pairs into a dictionary of lists:{'yellow': [1, 3], 'blue': [2, 4], 'red': [1]} 

sample input:
Enter the sequence of key-value pairs as a list :[('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
output:
Grouping a sequence of key-value pairs into a dictionary of lists:{'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}

Explanation:
The program takes a sequence of key-value pairs as input and creates a dictionary where each key maps to a list of values associated with that key. In this case, for the input sequence [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)], the output dictionary groups the values by their respective keys, resulting in {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}.
---------------------------------------------------------------------------------------------------------------------------------------------------


12. Create a Python program that simulates a simple inventory management system.
 Allow users to add items to the inventory, update item quantities, and remove items using a dictionary.

sample input/output:

1. Display Inventory
2. Add Item
3. Update Quantity
4. Remove Item
5. Exit
Enter your choice: 2
Enter the item name: Apple
Enter the quantity to add: 10
Added 10 Apple(s) to inventory.

sample 2:

1. Display Inventory
2. Add Item
3. Update Quantity
4. Remove Item
5. Exit
Enter your choice: 5
Exiting...

--------------------------------------------------------------------------------------------------------------------------------------------------------
13. Implement a Python program that simulates a simple phone book. 
Allow users to add contacts, search for contacts, and delete contacts using a dictionary.

sample input/output:

1. Display Phone Book
2. Add Contact
3. Search Contact
4. Delete Contact
5. Exit
Enter your choice: 2
Enter the contact name: John
Enter the contact number: 1234567890
Added John to the phone book with number 1234567890.

sample 2:
1. Display Phone Book
2. Add Contact
3. Search Contact
4. Delete Contact
5. Exit
Enter your choice: 1
Phone Book:
John: 1234567890
Alice: 9876543210
-------------------------------------------------------------------------------------------------------------------------------------------------------
14. Develop a Python program that takes a dictionary of words and their meanings and allows users to search for the meaning of a word.

sample input:
Dictionary of Words and Meanings:
python: a high-level, interpreted programming language
algorithm: a process or set of rules to be followed in calculations or other problem-solving operations
database: a structured set of data held in a computer, especially one that is accessible in various ways

Enter a word to search for its meaning (or 'exit' to quit):
python
Meaning of 'python': a high-level, interpreted programming language
----------------------------------------------------------------------------------------------------------------------------------------------------------


15. Write a program that takes a dictionary of city names and their populations, and prints the city with the highest population.

sample input/output:

Enter the number of cities: 4
Enter the name of city 1: New York
Enter the population of New York: 8537673
Enter the name of city 2: Los Angeles
Enter the population of Los Angeles: 3979576
Enter the name of city 3: Chicago
Enter the population of Chicago: 2695598
Enter the name of city 4: Houston
Enter the population of Houston: 2320268
The city with the highest population is: New York (Population: 8537673)